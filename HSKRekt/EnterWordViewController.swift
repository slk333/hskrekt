import UIKit
import CoreData
import AVFoundation
class EnterWordViewController: UIViewController,UITextFieldDelegate {
    
    
    let context=(UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
    var currentMot:Mot!
    var correctText:String!
    var scoreGlobalActuel:Int=0
    var stringToEnter=""
    
    @IBOutlet weak var characterLabel:UILabel!
    @IBOutlet weak var answerTF: UITextField!
    @IBOutlet weak var correctOrFalseSymbolLabel:UILabel!
    @IBOutlet weak var scoreBar:UIProgressView!
    @IBOutlet weak var infoButton: UIButton!
    
    let defaultGreenColor=UIColor(colorLiteralRed: 65/255, green: 199/255, blue: 34/255, alpha: 0.75)
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        (segue.destination as! DetailViewController).mot=currentMot

    
    }
    
    @IBAction func textChanged(_ sender: UITextField) {
        // CHECK ANSWER
        
        if sender.text==currentMot.pinyin{
          
            // si c'est la bonne r√©ponse
            
            // augmentation du score si il n'y a pas eu de mauvaise r√©ponse
            if correctOrFalseSymbolLabel.text! != "‚úó"{
           
                if currentMot.score<10{currentMot.score+=1}
            updateExpirationDateAndSave()
                 scoreGlobalActuel+=1
            //    print(currentMot.score)
            
            }

            // gestion de l'interface
            correctOrFalseSymbolLabel.textColor=defaultGreenColor
            correctOrFalseSymbolLabel.text="‚úì"
            
            
            // schedule la new question dans 1 seconde
            _=Timer.scheduledTimer(withTimeInterval: 1.1, repeats: false, block: {_ in self.createNewQuestion()})
            sender.keyboardType = .default
            sender.reloadInputViews()
            
            
            
        }
        else if sender.text?.characters.count==currentMot.pinyin.characters.count {
            // si c'est la mauvaise r√©ponse, baisser le score une fois, et ignorer les prochaines mauvaises r√©ponses, jusqu'√† ce que l'utilisateur ait la bonne r√©ponse
            guard correctOrFalseSymbolLabel.text != "‚úó" else {return}
            
            // premi√®re mauvaise r√©ponse
            // gestion de l'interface
            correctOrFalseSymbolLabel.text="‚úó"
            correctOrFalseSymbolLabel.textColor=UIColor(colorLiteralRed: 1, green: 0, blue: 0, alpha: 0.75)
            // mise √† jour du score
            if currentMot.score>3{currentMot.score=3}
            else {
                if currentMot.score>1{currentMot.score-=2}
                else{ if currentMot.score==1{currentMot.score=0}}}
           updateExpirationDateAndSave()
            scoreGlobalActuel-=1
          //  print(currentMot.score)
            
            
            return}
        else if correctText[correctText.index(correctText.startIndex, offsetBy: sender.text!.characters.count)] == " "  && !stringToEnter.isEmpty{
            
        sender.text?.append(" ")
            
        }
        
        
    }
    
    
    func toggleOff(){
    correctOrFalseSymbolLabel.text=""
        answerTF.text=""
    }
    
    func updateExpirationDateAndSave(){
        let temps√Äajouter=100*pow(3, Double(currentMot.score))
        currentMot.date=Date(timeIntervalSinceNow: temps√Äajouter).timeIntervalSinceReferenceDate
        try! context.save()
    }
    
    // REAGIR AU TEXTE ENTR√â
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        stringToEnter=string
       
        if textField.text?.characters.count==correctText.characters.count && !string.isEmpty{
        return false
        }
        
        if string.isEmpty{
            guard let characterToDeleteIndex=correctText.index(correctText.startIndex, offsetBy: range.location,limitedBy:correctText.index(before: correctText.endIndex)) else{return true}
            if Int(String(correctText[characterToDeleteIndex])) != nil{
                textField.keyboardType = .numbersAndPunctuation
                textField.reloadInputViews()
                return true
            }
            else if textField.keyboardType == .numbersAndPunctuation{
                textField.keyboardType = .default
                textField.reloadInputViews()
                return true
            }
            return true
        
        
        }
      
     
        /* Il faut obtenir le caract√®re qui suit celui qui est entr√©. L'index du caract√®re entr√© correspond au lowerbound du range modifi√©, et l'index du caract√®re suivant correspond au upperBound du range modifi√©*/
        
        guard let existingFollowingCharacterIndex=correctText.index(correctText.startIndex, offsetBy: range.location+1,limitedBy:correctText.index(before: correctText.endIndex))
            
            else{
                // on est dans la situation o√π l'utilisateur est en train d'√©crire le dernier caract√®re du mot √† √©tudier, donc le dernier ton
                
               
                
                // CHECK LA REPONSE
                
               
                return true
        }
        
        // cas o√π l'utilisateur doit encore √©crire au moins un caract√®re apr√®s celui qu'il est en train d'√©crire
        
        // si le prochain caract√®re qu'il devra √©crire est un entier, switch le clavier
        
        if Int(String(correctText[existingFollowingCharacterIndex])) != nil{
            textField.keyboardType = .numbersAndPunctuation
            textField.reloadInputViews()
        }
            
            // si le prochain caract√®re est une lettre et que le clavier est num√©rique, le mettre en mode lettres
            
        else if textField.keyboardType == .numbersAndPunctuation {textField.keyboardType = .default
            textField.reloadInputViews() }
        
        
        // si le prochain caract√®re √† entrer est un espace, pr√©voir un timer pour rajouter automatiquement l'espace
        
        
        // √† d√©faut de r√©gles particuli√®res, autoriser l'√©criture
        return true
    }
    
    func createNewQuestion(){
        toggleOff()
        scoreBar.progress=Float(scoreGlobalActuel)/Float(1530)
        
        // choix d'un nouveau mot
        // trouver les mots expir√©s
        let dateOfNow:Double=Date(timeIntervalSinceNow: 0).timeIntervalSinceReferenceDate
        let expiredWordsRequest=NSFetchRequest<Mot>(entityName: "Mot")
        expiredWordsRequest.predicate=NSPredicate(format: "%K < %@", #keyPath(Mot.date), String(dateOfNow))
        let sorting=NSSortDescriptor(key: "date", ascending: true)
        expiredWordsRequest.sortDescriptors=[sorting]
        
        guard  let expiredWords=try? context.fetch(expiredWordsRequest) else {return}
        
            if expiredWords.count != 0{
                // si il y a un mot √† r√©viser, on prend le plus ancien
            currentMot=expiredWords.first
            }
            
            else{
                
            // Il n'y a plus de mot √† r√©viser
         //   print("Il n'y a plus de mot √† r√©viser")
            // 1) il reste des mots jamais r√©vis√©s
                
            let fetchNeverSeenWordRequest=NSFetchRequest<Mot>(entityName: "Mot")
            fetchNeverSeenWordRequest.predicate=NSPredicate(format: "%K == %@", #keyPath(Mot.date), "1000000000")
            if let neverSeenWords=try? context.fetch(fetchNeverSeenWordRequest){
               // print("neverSeenWordsCount : \(neverSeenWords.count)")
            currentMot=neverSeenWords[Int(arc4random_uniform(UInt32(neverSeenWords.count)))]
            }
                // il ne reste plus du tout de mots √† r√©viser

            else {
            answerTF.text="Come back later !üòÇ"
            characterLabel.text=""
            infoButton.isHidden=true
                 return
                }
           
        
        }
        
        
        
        // choix d'un mot au hasard
       
        
        // mise √† jour de l'interface
      
        characterLabel.text=currentMot.character
        correctText=currentMot.pinyin!
      
        
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        createNewQuestion()
        answerTF.becomeFirstResponder()
        
        
        
        // Do any additional setup after loading the view.
    }
}
